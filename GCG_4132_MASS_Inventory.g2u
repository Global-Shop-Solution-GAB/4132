Program.Sub.ScreenSU.Start
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.Global.sProduct2Id.Declare(String)
V.Global.iC.Declare(Long)
V.Global.sFilePriceBook.Declare(String)

Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.SetErrorHandler("Main_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

F.ODBC.Connection!conX.OpenConnection(v.Ambient.PDSN,v.Ambient.PUser,v.Ambient.PPass) 
V.Local..BulkDeclareString(sPart, sLoc, sRev)

'connect 
v.Local.sUser.Declare(STring) 
v.Local.sPass.Declare(String) 
v.Local.sSecTok.Declare(STring) 
v.Local.sConString.Declare(String) 
V.Local.sRet.Declare(String)
V.Local.sSQL.Declare(String)

'get Connection string
F.ODBC.Connection!conX.ExecuteAndReturn("Select * From GCG_4132_CONNECTION Where NUM = '1'", V.Local.sRet)
F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
Function.Intrinsic.String.WeakDecryption(V.Local.sRet(1), v.Local.sUser)
Function.Intrinsic.String.WeakDecryption(V.Local.sRet(2), v.Local.sPass)
Function.Intrinsic.String.WeakDecryption(V.Local.sRet(3), v.Local.sSecTok)


'Set Connection String
F.Intrinsic.String.Build("Offline=False;Password={1};Security Token={2};User={0};Use Sandbox=False",v.Local.sUser,v.Local.sPass,v.Local.sSecTok,v.Local.sConString) 
'Set Connection String 
F.Automation.SalesForce.SetConnectionString(v.Local.sConString)

	
	'create basic table- inventory_Mstr
	Function.Intrinsic.Control.CallSub(createdatatables) 
	
	
	'Sync Part
	Function.Intrinsic.Control.CallSub(sync_part)
	
	
		'move this here
	F.Intrinsic.UI.CloseWaitDialog
	
	F.Intrinsic.Control.CallSub(unload)
	

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4132_MASS_Inventory.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf


Program.Sub.Main.End

Program.Sub.unload.Start
F.Intrinsic.Control.SetErrorHandler("unload_Err")
F.Intrinsic.Control.ClearErrors
V.Local.sError.Declare(String)

'close the connection and program
F.ODBC.Connection!conX.Close 
F.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("unload_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4132_MASS_Inventory.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.End

Function.Intrinsic.Control.EndIf
Program.Sub.unload.End

Program.Sub.createdatatables.Start
F.Intrinsic.Control.SetErrorHandler("createdatatables_Err")
F.Intrinsic.Control.ClearErrors
V.Local.sError.Declare(String)

F.Data.DataTable.Create("Inventory_Mstr",True) 

'inventory master datatable. 
F.Data.DataTable.AddColumn("Inventory_Mstr","Part","String") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Description","String") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Bin","String") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Qty_Onhand","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Product_Line","string") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Flag_Inactive","string") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Code_Sort","string") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Time_Material_Lead","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","UM_Purchasing","string") 
F.Data.DataTable.AddColumn("Inventory_Mstr","UM_Inventory","string") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Qty_Onorder_PO","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Qty_Onorder_WO","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Qty_Reorder","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Qty_Safety","float")
F.Data.DataTable.AddColumn("Inventory_Mstr","QTY_REQUIRED","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Price","Float")

'inventory master 2 
F.Data.DataTable.AddColumn("Inventory_Mstr","Description_2","String") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Description_3","String") 
F.Data.DataTable.AddColumn("Inventory_Mstr","TEXT_INFO1","String") 
F.Data.DataTable.AddColumn("Inventory_Mstr","TEXT_INFO2","String") 

'item master data 
F.Data.DataTable.AddColumn("Inventory_Mstr","Lot","String") 
F.Data.DataTable.AddColumn("Inventory_Mstr","In_Transit_Qty","float") 

'Inventory master 3
F.Data.DataTable.AddColumn("Inventory_Mstr","Pkgd_Weight","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Pcs_Per_Cntnr","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Cntnrs_Per_Pallet","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Requires_Testing","string") 

'Custom/custom calculated fields
'Location is going to be stored in a custom field GSS_Location_c.Product2
F.Data.DataTable.AddColumn("Inventory_Mstr","Location","String") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Net","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","In_Inspection","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","In_Quality","float") 
F.Data.DataTable.AddColumn("Inventory_Mstr","Allocated","float")
F.Data.DataTable.AddColumn("Inventory_Mstr","List_Price","float")

'roof- for mass upload
F.Data.DataTable.AddColumn("Inventory_Mstr","Roof","String")


F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Label("createdatatables_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4132_MASS_Inventory.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf
Program.Sub.createdatatables.End

Program.Sub.sync_part.Start
F.Intrinsic.Control.SetErrorHandler("sync_part_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.sSQL.Declare(String) 
v.Local.sPart.Declare(String) 
v.Local.srev.Declare(String)
v.Local.i.Declare(Long) 


F.Intrinsic.UI.InvokeWaitDialog("Syncing with SalesForce...","GS-SalesForce Inventory Sync")

Function.Intrinsic.Control.CallSub(get_Part_info)

'fill from dictionary roof info
F.Data.DataTable.AddExpressionColumn("Inventory_Mstr", "PL", "String", "PART+'-'+LOCATION")
F.Data.Dictionary.CreateFromSQL("dict", "conX", "Select rTrim(PART)+'-'+rTrim(LOCATION) as PL, Roof From GCG_4132_RoofType")
F.Data.Dictionary.SetDefaultReturn("dict", "")
F.Data.DataTable.FillFromDictionary("Inventory_Mstr", "dict", "PL", "Roof")
F.Data.Dictionary.Close("dict")

Function.Intrinsic.Control.CallSub(sync_to_salesforce) 
	

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("sync_part_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4132_MASS_Inventory.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf


Program.Sub.sync_part.End

Program.Sub.get_part_info.Start
F.Intrinsic.Control.SetErrorHandler("get_part_info_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.ssql.Declare(string)
v.Local.sPart.Declare(string)
V.Local.sLoc.Declare(String)
v.Local.iRow.Declare(long)
v.Local.fpkgdweight.Declare(float)
v.Local.fpcspercntnr.Declare(float)
v.Local.fcntnrsperpallet.Declare(float)
v.Local.sreqtesting.Declare(string)
v.Local.fintransit.Declare(float)
V.Local.sPBook.Declare(String)

'create a boolean for the inactive flag
v.Local.binactive.Declare(boolean)



'select all from inventory master: part  loc
F.Data.DataTable.CreateFromSQL("PARTLOC","conX","Select PART, LOCATION From INVENTORY_MSTR")

F.Intrinsic.Control.For(V.Local.iRow,0,V.datatable.PARTLOC.RowCount--,1)
	V.Local.sPart.Set(V.DataTable.PARTLOC(V.Local.iRow).PART!FieldVal)
	V.Local.sLoc.Set(V.DataTable.PARTLOC(V.Local.iRow).LOCATION!FieldVal)
	
	'Get Data From Inventory_Mstr
	F.Intrinsic.String.Build("Select V_Inventory_Mstr.PART,Location,AMT_COST as Price,Description,Bin,QTY_REQUIRED,Qty_Onhand,Product_Line,Flag_Inactive,Code_Sort,Time_Material_Lead,UM_PURCHASING,UM_INVENTORY,QTY_onorder_PO,QTY_onorder_WO,QTY_reorder,Qty_Safety,V_INVENTORY_MST2.Description_2,V_Inventory_MST2.TEXT_INFO1,V_INVENTORY_MST2.TEXT_INFO2 From V_Inventory_mstr Left Join V_Inventory_mst2 on V_Inventory_mstr.PART = V_INVENTORY_MST2.PART and V_INVENTORY_MSTR.LOCATION = V_Inventory_Mst2.Location  Where V_INVENTORY_MSTR.Part = '{0}'",v.Local.sPart.Trim,v.Local.sSQL) 
	'load into datatable. 
	'have to add rows manually. 
	F.ODBC.Connection!conX.OpenLocalRecordsetRO("rst",v.Local.sSQL) 
	Function.Intrinsic.Control.If(v.ODBC.conX!rst.EOF,=,False) 
		'check the inactive flag to see if Y set boolean to True otherwise False
		f.Intrinsic.Control.If(v.ODBC.conX!rst.FieldValTrim!FLAG_INACTIVE,=,"Y")
			'set to true
			v.Local.binactive.Set(True)
		f.Intrinsic.Control.Else
			'set to false
			v.Local.binactive.Set(False)
		f.Intrinsic.Control.EndIf
		
		Function.Data.DataTable.AddRow("Inventory_Mstr","Part",v.ODBC.conX!rst.FieldValTrim!PART,"PRICE",v.ODBC.conX!rst.FieldValTrim!Price,"QTY_REQUIRED",v.ODBC.conX!rst.FieldValTrim!QTY_REQUIRED,"Location",v.ODBC.conX!rst.FieldValTrim!LOCATION,"Description",v.ODBC.conX!rst.FieldValTrim!Description,"Bin",v.ODBC.conX!rst.FieldValTrim!Bin,"Qty_Onhand",v.ODBC.conX!rst.FieldValTrim!Qty_ONhand, "Product_Line",v.ODBC.conX!rst.FieldValTrim!Product_line,"Flag_Inactive",v.Local.binactive.Trim,"Code_Sort",v.ODBC.conX!rst.FieldValTrim!Code_Sort,"Time_Material_Lead",v.ODBC.conX!rst.FieldValTrim!Time_Material_Lead,"UM_Purchasing",v.ODBC.conX!rst.FieldValTrim!UM_Purchasing,"UM_Inventory",v.ODBC.conX!rst.FieldValTrim!UM_INVENTORY,"Qty_Onorder_PO",v.ODBC.conX!rst.FieldValTrim!Qty_Onorder_PO,"Qty_Onorder_WO",v.ODBC.conX!rst.FieldValTrim!Qty_Onorder_WO,"Qty_Reorder",v.ODBC.conX!rst.fieldvaltrim!Qty_Reorder,"Qty_Safety",v.ODBC.conX!rst.FieldValTrim!Qty_Safety) 
		f.Intrinsic.Control.Else 
			'exit sub, if we couldn't find this Part. Houston, WE have a problem. 
			F.Intrinsic.Control.ExitSub 		
	Function.Intrinsic.Control.EndIf
	f.ODBC.conX!rst.Close 
	
	
	'data from INVENTORY_MSTR2
	F.Intrinsic.String.Build("Select TEXT_INFO1, TEXT_INFO2, DESCRIPTION_2, DESCRIPTION_3 From V_INVENTORY_MST2 Where V_INVENTORY_MST2.Part = '{0}'",V.Local.sPart.Trim,V.Local.sSQL) 
	F.ODBC.Connection!conX.OpenLocalRecordsetRO("rst",v.Local.sSQL)
	Function.Intrinsic.Control.If(v.ODBC.conX!rst.EOF,=,False) 
		V.Local.sPBook.Set(V.ODBC.conX!rst.FieldValTrim!TEXT_INFO2)
		Function.Intrinsic.Control.If(V.Local.sPBook, =, "")
			V.Local.sPBook.Set("Standard Price Book")
		Function.Intrinsic.Control.EndIf
		Function.Data.DataTable.SetValue("Inventory_Mstr",V.Local.iRow,"TEXT_INFO1", V.ODBC.conX!rst.FieldValTrim!TEXT_INFO1, "TEXT_INFO2", V.Local.sPBook,"DESCRIPTION_2", V.ODBC.conX!rst.FieldValTrim!DESCRIPTION_2,"DESCRIPTION_3", V.ODBC.conX!rst.FieldValTrim!DESCRIPTION_3)
	Function.Intrinsic.Control.Else
		V.Local.sPBook.Set("Standard Price Book")
		Function.Data.DataTable.SetValue("Inventory_Mstr",V.Local.iRow,"TEXT_INFO2", V.Local.sPBook)
	Function.Intrinsic.Control.EndIf
	
	F.ODBC.conX!rst.Close 
	
	
	'Get Data From Inventory_Mst3
	'packaged weight, pieces per container, containers per pallet, requires testing
	F.Intrinsic.String.Build("Select Pkgd_Weight, Pcs_Per_Cntnr, Cntnrs_Per_Pallet, Requires_Testing From V_Inventory_Mst3 Where Part = '{0}' and LOCATION = '{1}'",v.Local.spart,v.Local.sLoc.Trim,v.Local.sSQL) 
	f.ODBC.Connection!conX.OpenLocalRecordsetRO("rst",v.Local.sSQL) 
	F.Intrinsic.Control.If(v.ODBC.conX!rst.EOF,=,False) 
		'OCTSRS will crash unless we set the float values to local variables
		v.Local.sreqtesting.Set(v.ODBC.conX!rst.FieldValTrim!Requires_testing)
		v.Local.fpkgdweight.Set(v.ODBC.conX!rst.FieldVal!Pkgd_Weight)
		v.Local.fpcspercntnr.Set(v.ODBC.conX!rst.FieldVal!Pcs_per_cntnr)
		v.Local.fcntnrsperpallet.Set(v.ODBC.conX!rst.FieldVal!Cntnrs_per_Pallet)
	
		F.data.dataTable.SetValue("Inventory_Mstr",v.Local.iRow,"Pkgd_Weight",v.Local.fpkgdweight,"Pcs_Per_Cntnr",v.Local.fpcspercntnr,"Cntnrs_Per_Pallet",v.Local.fcntnrsperpallet,"Requires_Testing",v.Local.sreqtesting) 	
	Function.Intrinsic.Control.EndIf
	F.ODBC.conX!rst.Close 
	
	'Get Data From Item_Master
	'lot and in transity qty
	F.Intrinsic.String.Build("Select Lot, In_Transit_Qty From V_Item_Master Where Part = '{0}' and LOCATION = '{1}'",v.Local.spart,v.Local.sLoc.Trim,v.Local.sSQL) 
	f.ODBC.Connection!conX.OpenLocalRecordsetRO("rst",v.Local.sSQL) 
	F.Intrinsic.Control.If(v.ODBC.conX!rst.EOF,=,False) 
		v.Local.fintransit.Set(v.ODBC.conX!rst.FieldValTrim!In_Transit_Qty)
		'add data. 
		F.data.dataTable.SetValue("Inventory_Mstr",v.Local.iRow,"Lot",v.ODBC.conX!rst.FieldVal!Lot,"In_Transit_Qty",v.Local.fintransit) 	
	Function.Intrinsic.Control.EndIf
	F.ODBC.conX!rst.Close 
		
F.Intrinsic.Control.Next(V.Local.iRow)
F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("get_part_info_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4132_MASS_Inventory.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(unload)
Function.Intrinsic.Control.EndIf
Program.Sub.get_part_info.End

Program.Sub.sync_to_salesforce.Start
F.Intrinsic.Control.SetErrorHandler("sync_to_salesforce_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.sSQL.Declare(String) 
v.Local.iC.Declare(Long) 
v.Local.sID.Declare(String) 
v.Local.sBillingStreet.Declare(String)
v.Local.sT.Declare(String) 
v.Local.sRet.Declare(String) 
v.Local.iR.Declare(long) 
v.Local.sFilter.Declare(String) 
v.Local.sContactRet.Declare(STring) 
v.Local.sContactID.Declare(String) 
V.Local.sFields.Declare(String)
V.Local.sValues.Declare(String)
V.Local.sFilePath.Declare(String)
V.Local.sFile.Declare(String)



F.Intrinsic.String.Build("{0}\ERROR_INVENTORY.TXT",V.Caller.FilesDir,V.Local.sFilePath)

'Go Through salesForce and Select to Datatable with a where based on Part from global links to Product2.Product_Code
'loop through Inventory_mstr datatable. 
F.Intrinsic.Control.For(v.Local.iC,0,V.dataTable.Inventory_Mstr.RowCount--,1) 
	V.Global.iC.Set(v.Local.iC)
	F.Intrinsic.String.Build("Select Id from Product2 Where ProductCode = '{0}' and GSS_Location__c = '{1}'",V.DataTable.Inventory_Mstr(v.Local.iC).Part!FieldValTrim,v.datatable.Inventory_Mstr(v.Local.iC).Location!fieldvaltrim,V.Local.sSQL) 
	'select to datatable. 
	F.Automation.SalesForce.SelectToDataTable("SF_ID",True,v.Local.sSQL) 
	F.Intrinsic.Control.If(V.DataTable.SF_ID.RowCount,>,0)  
		'Means this record already exists in SF so we don't have to add it, but we want that id. 
		'always assume it's 1
		V.Local.sID.Set(V.DataTable.SF_ID(0).ID!FieldValTrim) 
		V.Global.sProduct2Id.Set(V.Local.sID)	
		' must update here!!!!!!
		'desc, bin, qty on hand, pL, flag inactive, code sort, time material lead, um purchasing
		F.Intrinsic.String.Build("Update Product2 Set Product_ID__c = '{0}', Bin_Number__c = '{1}', Lot_Number__c = '{2}', StockOnHand__c = '{3}', Product_Line_Code__c = '{4}', Inactive__c = '{5}', Finish__c = '{6}', LeadTimeDays__c = '{7}', Purchasing_Unit_of_Measure__c = '{8}'",v.DataTable.Inventory_Mstr(v.Local.iC).Description!FieldValTrim,v.dataTable.Inventory_Mstr(v.Local.iC).Bin!FieldValTrim,v.dataTable.Inventory_Mstr(v.Local.iC).Lot!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Qty_Onhand!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Product_Line!FieldValTrim,v.datatable.Inventory_Mstr(v.Local.iC).Flag_Inactive!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Code_Sort!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Time_Material_Lead!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).UM_PURCHASING!Fieldvaltrim,v.Local.sSQL) 
		'UM inventory, qty on order p, qty on order wo, qty reorder, qty safety	
		F.Intrinsic.String.Build("{0}, Inventory_Selling_Unit_of_Measure__c = '{1}', On_Order_PO__c = '{2}',On_Order_Work_Order__C = '{3}', Reorder_Point__c = '{4}',Units_per_Box__c = '{5}'",v.Local.sSQL,v.DataTable.Inventory_Mstr(v.Local.iC).UM_Inventory!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Qty_Onorder_PO!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Qty_Onorder_WO!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Qty_Reorder!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Qty_Safety!FieldValTrim,v.Local.sid,v.Local.ssql)
		'original code for second line
		'description 2, description 3, user 1, user 2, in transit
		f.Intrinsic.String.Build("{0}, Description = '{1}', Product_Dimension__c = '{2}', Family = '{3}', Category2__c = '{4}', In_transit__c = '{5}'",v.Local.sSQL,v.DataTable.Inventory_Mstr(v.Local.iC).Description_2!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Description_3!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Text_Info1!FieldValTrim,V.DataTable.Inventory_Mstr(v.Local.iC).Roof!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).In_transit_Qty!FieldValTrim, V.Local.sSQL)
		'packaged weight, pieces per carton, cartons per pallet, requirements
		f.Intrinsic.String.Build("{0}, Requirements__c = '{1}', Pieces_Cartons_per_pallet__c = '{2}', Pieces_per_Carton__c = '{3}', Packaged_weight__c = '{4}' where ID = '{5}'",v.Local.sSQL,v.DataTable.Inventory_Mstr(v.Local.iC).QTY_REQUIRED!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Cntnrs_Per_Pallet!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Pcs_per_Cntnr!FieldValTrim,v.DataTable.Inventory_Mstr(v.Local.iC).Pkgd_Weight!FieldValTrim, V.Global.sProduct2Id, V.Local.sSQL)
		F.Automation.SalesForce.ExecuteSQL(v.Local.sSQL) 
		' check for price book entry''''''''''''
		F.Intrinsic.Control.CallSub(update_pricebook)			
	Function.Intrinsic.Control.Else 
		'means it doesn't exist in salesforce. 
		'we got to execute and return ID. 
		'create new one. 
		'also add entry into GSS GCG_4132_Inv_Custom ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''insert'''''''''''''execute
		
		F.Intrinsic.String.Build("Insert Into GCG_4132_Inv_Custom (PART,LOCATION,LastOnHand) Values ('{0}','{1}','{2}')", V.DataTable.Inventory_Mstr(v.Local.iC).Part!FieldValTrim, V.datatable.Inventory_Mstr(v.Local.iC).Location!fieldvaltrim, V.DataTable.Inventory_Mstr(v.Local.iC).Qty_Onhand!FieldValTrim,V.Local.sSQL)
		F.ODBC.Connection!conX.Execute(V.Local.sSQL)
		
		F.Intrinsic.String.Build("({0},{1},{2},{3},{4},{5},{6},{7},{8},{9}","ProductCode", "Name", "Bin_Number__c",  "Lot_Number__c","StockOnHand__c", "Product_Line_Code__c", "Inactive__c", "Finish__c", "LeadTimeDays__c", "Purchasing_Unit_of_Measure__c", V.Local.sFields)
		F.Intrinsic.String.Build("('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}'",V.dataTable.Inventory_Mstr(v.Local.iC).Part.FieldValTrim, V.dataTable.Inventory_Mstr(v.Local.iC).Description!FieldValTrim, V.dataTable.Inventory_Mstr(v.Local.iC).Bin!FieldValTrim, V.dataTable.Inventory_Mstr(v.Local.iC).Lot!FieldValTrim,V.DataTable.Inventory_Mstr(v.Local.iC).Qty_Onhand!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Product_Line!FieldValTrim, V.datatable.Inventory_Mstr(v.Local.iC).Flag_Inactive!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Code_Sort!FieldValTrim,V.DataTable.Inventory_Mstr(v.Local.iC).Time_Material_Lead!FieldValTrim,V.DataTable.Inventory_Mstr(v.Local.iC).UM_PURCHASING!Fieldvaltrim,V.Local.sValues)
		
		F.Intrinsic.String.Build("{0},{1},{2},{3},{4},{5}",V.Local.sFields, "Inventory_Selling_Unit_of_Measure__c", "On_Order_PO__c", "On_Order_Work_Order__c", "Reorder_Point__c" ,"Units_per_Box__c",V.Local.sFields)
		F.Intrinsic.String.Build("{0},'{1}','{2}','{3}','{4}','{5}'", V.Local.sValues, V.DataTable.Inventory_Mstr(v.Local.iC).UM_Inventory!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Qty_Onorder_PO!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Qty_Onorder_WO!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Qty_Reorder!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Qty_Safety!FieldValTrim, V.Local.sValues)

		F.Intrinsic.String.Build("{0},{1},{2},{3},{4},{5}",V.Local.sFields, "Description", "Product_Dimension__c", "Family", "Category2__c", "In_transit__c ",V.Local.sFields)
		F.Intrinsic.String.Build("{0},'{1}','{2}','{3}','{4}','{5}'", V.Local.sValues, V.DataTable.Inventory_Mstr(v.Local.iC).Description_2!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Description_3!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Text_Info1!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Roof!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).In_transit_Qty!FieldValTrim, V.Local.sValues)
		
		F.Intrinsic.String.Build("{0},{1},{2},{3},{4})",V.Local.sFields, "Requirements__c" , "Pieces_Cartons_per_pallet__c" , "Pieces_per_Carton__c" , "Packaged_weight__c",V.Local.sFields)
		F.Intrinsic.String.Build("{0},'{1}','{2}','{3}','{4}')", V.Local.sValues, V.DataTable.Inventory_Mstr(v.Local.iC).QTY_REQUIRED!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Cntnrs_Per_Pallet!FieldValTrim, V.DataTable.Inventory_Mstr(v.Local.iC).Pcs_per_Cntnr!FieldValTrim,V.DataTable.Inventory_Mstr(v.Local.iC).Pkgd_Weight!FieldValTrim, V.local.sValues)

		F.Intrinsic.String.Build("Insert Into Product2 {0} Values {1}",V.Local.sFields,V.Local.sValues,V.Local.sSQL) 
		
		F.Automation.SalesForce.ExecuteSQLREturnID(v.Local.sSQL,v.Local.sID) 
		V.Global.sProduct2Id.Set(V.Local.sID)
		
		'add pricebook entry
		F.Intrinsic.Control.CallSub(cmdsave_click)
		
	Function.Intrinsic.Control.EndIf 
	F.Data.DataTable.Close("SF_ID")
F.Intrinsic.Control.Next(v.Local.iC)

F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sFile)
F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("sync_to_salesforce_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4132_MASS_Inventory.g2u",V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	
	'F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.String.Build("{0}{1} PART: {2} {3}{4}", V.Local.sFile, V.Ambient.NewLine,V.DataTable.Inventory_Mstr(v.Local.iC).Part.FieldValTrim, V.Local.sError,V.Ambient.NewLine, V.Local.sFile)
	F.Intrinsic.File.String2File(V.Local.sFilePath,V.Local.sFile)
	F.Data.DataTable.Close("SF_ID")
	'go to the next part
	F.Intrinsic.Control.Next(v.Local.iC) 
	
Function.Intrinsic.Control.EndIf


Program.Sub.sync_to_salesforce.End

Program.Sub.cmdSave_Click.Start
F.Intrinsic.Control.SetErrorHandler("Form_UnLoad_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.ssql.Declare(string)
V.Local.sPricebook2Id.Declare(String)
V.Local.fPartPrice.Declare(Float)
V.Local.sID.Declare(String)
V.Local.sFilePath.Declare(String)

F.Intrinsic.String.Build("{0}\ERROR_PRICEBOOK.TXT",V.Caller.FilesDir,V.Local.sFilePath)

'first get PRICEBOOK2.ID
F.Intrinsic.String.Build("Select ID FROM PRICEBOOK2 Where Name = '{0}'", V.DataTable.Inventory_Mstr(V.Global.iC).TEXT_INFO2!FieldValTrim, V.Local.ssql)
F.Automation.SalesForce.SelectToDataTable("PRICEBOOK2",True,V.Local.ssql) 
V.Local.sPricebook2Id.Set(V.DataTable.PRICEBOOK2(0).ID!FieldValTrim)
F.Data.DataTable.Close("PRICEBOOK2")

'V.Global.sProduct2Id 
V.Local.fPartPrice.Set(V.DataTable.Inventory_Mstr(V.Global.iC).Price!FieldValTrim)
F.Intrinsic.String.Build("Insert Into PricebookEntry (Product2ID,Pricebook2ID,UnitPrice,UseStandardPrice) Values ('{0}','{1}','{2}','{3}')", V.Global.sProduct2Id,V.Local.sPricebook2Id, V.Local.fPartPrice,"false",v.Local.sSQL) 
F.Automation.SalesForce.ExecuteSQLREturnID(v.Local.sSQL,v.Local.sID) 


Function.Intrinsic.Control.If(V.DataTable.Inventory_Mstr(V.Global.iC).TEXT_INFO2!FieldValTrim, <>, "")
	Function.Intrinsic.Control.If(V.DataTable.Inventory_Mstr(V.Global.iC).TEXT_INFO2!FieldValTrim, <>, "Standard Price Book")
		'first get PRICEBOOK2.ID
		F.Intrinsic.String.Build("Select ID FROM PRICEBOOK2 Where Name = '{0}'", V.DataTable.Inventory_Mstr(V.Global.iC).TEXT_INFO2!FieldValTrim, V.Local.ssql)
		F.Automation.SalesForce.SelectToDataTable("PRICEBOOK2",True,V.Local.ssql) 
		V.Local.sPricebook2Id.Set(V.DataTable.PRICEBOOK2(0).ID!FieldValTrim)
		F.Data.DataTable.Close("PRICEBOOK2")
	
		'V.Global.sProduct2Id
		V.Local.fPartPrice.Set(V.DataTable.Inventory_Mstr(V.Global.iC).Price!FieldValTrim)
		F.Intrinsic.String.Build("Insert Into PricebookEntry (Product2ID,Pricebook2ID,UnitPrice,UseStandardPrice) Values ('{0}','{1}','{2}','{3}')", V.Global.sProduct2Id,V.Local.sPricebook2Id, V.Local.fPartPrice,"false",v.Local.sSQL) 
		F.Automation.SalesForce.ExecuteSQLREturnID(v.Local.sSQL,v.Local.sID) 
	Function.Intrinsic.Control.EndIf
Function.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Form_UnLoad_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4132_MASS_Inventory.g2u",V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	'F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.String.Build("{0}{1} PART: {2} {3}{4}", V.Global.sFilePriceBook, V.Ambient.NewLine,V.DataTable.Inventory_Mstr(v.Global.iC).Part.FieldValTrim, V.Local.sError,V.Ambient.NewLine, V.Global.sFilePriceBook)
	F.Intrinsic.File.String2File(V.Local.sFilePath,V.Global.sFilePriceBook)
	
	Function.Intrinsic.Control.If(V.DataTable.PRICEBOOK2.Exists, = , TRUE)
	F.Data.DataTable.Close("PRICEBOOK2")
	Function.Intrinsic.Control.EndIf
	
	Function.Intrinsic.Control.If(V.DataTable.SF_PRICE.Exists, = , TRUE)
	F.Data.DataTable.Close("SF_PRICE")
	Function.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.ExitSub
	
Function.Intrinsic.Control.EndIf


Program.Sub.cmdSave_Click.End

Program.Sub.UpDate_PriceBook.Start
F.Intrinsic.Control.SetErrorHandler("UpDate_PriceBook_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Local.ssql.Declare(String)
V.Local.sPricebook2Id.Declare(String)
V.Local.sID.Declare(String)
V.Local.fPartPrice.Declare(String)
V.Local.sFilePath.Declare(String)

F.Intrinsic.String.Build("{0}\ERROR_PRICEBOOK.TXT",V.Caller.FilesDir,V.Local.sFilePath)

'this is to update- standard pricebook must already exist
V.Local.fPartPrice.Set(V.DataTable.Inventory_Mstr(V.Global.iC).Price!FieldValTrim)

Function.Intrinsic.Control.If(V.DataTable.Inventory_Mstr(V.Global.iC).TEXT_INFO2!FieldValTrim, <>, "")
	'first get PRICEBOOK2.ID
	F.Intrinsic.String.Build("Select ID FROM PRICEBOOK2 Where Name = '{0}'", V.DataTable.Inventory_Mstr(V.Global.iC).TEXT_INFO2!FieldValTrim, V.Local.ssql)
	F.Automation.SalesForce.SelectToDataTable("PRICEBOOK2",True,V.Local.ssql) 
	V.Local.sPricebook2Id.Set(V.DataTable.PRICEBOOK2(0).ID!FieldValTrim)
	F.Data.DataTable.Close("PRICEBOOK2")
	'V.Global.sProduct2Id
	'check if there is an entry for this pricebook and product
	F.Intrinsic.String.Build("Select ID FROM PricebookEntry Where Product2ID = '{0}' AND Pricebook2ID = '{1}'", V.Global.sProduct2Id, V.Local.sPricebook2Id, V.Local.ssql)
	F.Automation.SalesForce.SelectToDataTable("SF_PRICE",True,v.Local.sSQL) 
	F.Intrinsic.Control.If(V.DataTable.SF_PRICE.RowCount,>,0)
		'then the entry already exists and we just update
		V.Local.sID.Set(V.DataTable.SF_PRICE(0).ID!FieldValTrim)
		F.Intrinsic.String.Build("UPDATE PricebookEntry Set UnitPrice = '{0}' Where ID = '{1}'", V.DataTable.Inventory_Mstr(V.Global.iC).Price!FieldValTrim,V.Local.sID,v.Local.sSQL) 
		F.Automation.SalesForce.ExecuteSQLREturnID(v.Local.sSQL,v.Local.sID)
	Function.Intrinsic.Control.Else
		'new entry
		F.Intrinsic.String.Build("Insert Into PricebookEntry (Product2ID,Pricebook2ID,UnitPrice,UseStandardPrice) Values ('{0}','{1}','{2}','{3}')", V.Global.sProduct2Id,V.Local.sPricebook2Id, V.DataTable.Inventory_Mstr(V.Global.iC).Price!FieldValTrim,"false",v.Local.sSQL) 
		F.Automation.SalesForce.ExecuteSQLREturnID(v.Local.sSQL,v.Local.sID) 
	Function.Intrinsic.Control.EndIf
	F.Data.DataTable.Close("SF_PRICE")
Function.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("UpDate_PriceBook_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4132_MASS_Inventory.g2u",V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	'F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.String.Build("{0}{1} PART: {2} {3}{4}", V.Global.sFilePriceBook, V.Ambient.NewLine,V.DataTable.Inventory_Mstr(v.Global.iC).Part.FieldValTrim, V.Local.sError,V.Ambient.NewLine, V.Global.sFilePriceBook)
	F.Intrinsic.File.String2File(V.Local.sFilePath,V.Global.sFilePriceBook)
	
	Function.Intrinsic.Control.If(V.DataTable.PRICEBOOK2.Exists, = , TRUE)
	F.Data.DataTable.Close("PRICEBOOK2")
	Function.Intrinsic.Control.EndIf
	
	Function.Intrinsic.Control.If(V.DataTable.SF_PRICE.Exists, = , TRUE)
	F.Data.DataTable.Close("SF_PRICE")
	Function.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.EndIf


Program.Sub.UpDate_PriceBook.End

Program.Sub.Comments.Start
${$0$}$$}$DH1$}$3/17/2017 8:08:50 AM$}$False
${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$'This is for Quickmount customer 
we are givine them custom places to track FedEx Account Number, Third Party Freight 
and UPS Account Number. 
Save to custom GCG_4132_Frght_Info

don't hate me whoever is reading this. you'll notice that the subs have not whitespace. that's cause whitespace slows stuff down apparently, so yes it annoying and hard to read. but the runtime is much quicker. and thats what is important....right?
Program.Sub.Comments.End